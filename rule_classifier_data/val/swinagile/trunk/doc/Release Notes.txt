ADP Fulltimers - MetricTool


Project Summary
-------------------------------------------------------------------------------
MetricTool is a code analysis application designed to simplify the process of
performing code metrics analysis on a set of Java projects - Jar libraries
or just straight class files.
-------------------------------------------------------------------------------

Project Members
------------------------------------------------------------------------------
Amrinder Singh Badwal
Ian Fieldhouse
Ben Hall
Asiri Wanigarathne
Andrew Cowan
-------------------------------------------------------------------------------


Hardware & Software Requirements
-------------------------------------------------------------------------------
Sun JAVA 5 Runtime
ANT 1.65

Optionally: Windows Operating System (To simplify configuration)

Dependent Libraries:

 JFreeChart - URL: http://www.jfree.org/jfreechart/
 XStream - URL: http://xstream.codehaus.org/

Dependent Build Libraries:

 Apache ANT - URL: http://ant.apache.org/
 ASM 3.0 - URL: http://asm.objectweb.org/
 JUNIT - URL: http://www.junit.org/index.htm
 PMD - URL: http://pmd.sourceforge.net/
 EMMA - URL: http://emma.sourceforge.net/
-------------------------------------------------------------------------------



[EMMA v2.0.5312 report, generated Sun Oct 29 20:54:21 EST 2006]
-------------------------------------------------------------------------------
OVERALL COVERAGE SUMMARY:

[class, %]	[method, %]	[block, %]	[line, %]	[name]
86%  (24/28)!	78%  (171/220)	59%  (3422/5831)!	57%  (725.6/1263)!	all classes

OVERALL STATS SUMMARY:

total packages:	2
total classes:	28
total methods:	220
total executable files:	27
total executable lines:	1263

COVERAGE BREAKDOWN BY PACKAGE:

[class, %]	[method, %]	[block, %]	[line, %]	[name]
83%  (19/23)!	74%  (136/184)	50%  (2362/4746)!	49%  (521.6/1054)!	swin.metrictool
100% (5/5)	97%  (35/36)	98%  (1060/1085)	98%  (204/209)	swin.metrictool.intentions
-------------------------------------------------------------------------------
COVERAGE SUMMARY FOR PACKAGE [swin.metrictool]:

[class, %]	[method, %]	[block, %]	[line, %]	[name]
83%  (19/23)!	74%  (136/184)	50%  (2362/4746)!	49%  (521.6/1054)!	swin.metrictool

COVERAGE BREAKDOWN BY SOURCE FILE:

[class, %]	[method, %]	[block, %]	[line, %]	[name]
0%   (0/1)!	0%   (0/7)!	0%   (0/289)!	0%   (0/82)!	HistIOTools.java
0%   (0/1)!	0%   (0/17)!	0%   (0/373)!	0%   (0/84)!	Histogram.java
0%   (0/1)!	0%   (0/11)!	0%   (0/904)!	0%   (0/190)!	OperationHandler.java
0%   (0/1)!	0%   (0/4)!	0%   (0/480)!	0%   (0/114)!	ProjectCreation.java
100% (1/1)	80%  (4/5)	57%  (86/150)!	55%  (22.8/41)!	FileSystemUtilities.java
100% (1/1)	100% (10/10)	62%  (246/394)!	70%  (46.9/67)!	ChartMaker.java
100% (1/1)	50%  (2/4)!	84%  (49/58)	92%  (1.8/2)	FanType.java
100% (1/1)	50%  (2/4)!	84%  (49/58)	92%  (1.8/2)	GrowthType.java
100% (1/1)	100% (11/11)	86%  (332/387)	86%  (68.3/79)	ExtractVersionMetrics.java
100% (1/1)	89%  (8/9)	88%  (143/163)	89%  (33/37)	ExtractVersionMetricsTest.java
100% (1/1)	100% (5/5)	93%  (180/193)	90%  (35/39)	ChartMakerTest.java
100% (1/1)	80%  (4/5)	95%  (58/61)	93%  (14/15)	XStreamUtility.java
100% (2/2)	89%  (17/19)	97%  (618/635)	97%  (127/131)	ClassMetricExtractor.java
100% (1/1)	100% (1/1)	100% (4/4)	100% (2/2)	ExtractVersionException.java
100% (1/1)	100% (12/12)	100% (83/83)	100% (26/26)	ExtractedClassData.java
100% (1/1)	100% (3/3)	100% (35/35)	100% (9/9)	ExtractedClassDataTest.java
100% (1/1)	100% (23/23)	100% (227/227)	100% (57/57)	ExtractedVersionData.java
100% (1/1)	100% (1/1)	100% (4/4)	100% (2/2)	MetricsExtractEvent.java
100% (1/1)	100% (6/6)	100% (32/32)	100% (9/9)	OperationHandlerTest.java
100% (1/1)	100% (13/13)	100% (95/95)	100% (32/32)	Project.java
100% (1/1)	100% (3/3)	100% (18/18)	100% (7/7)	ProjectList.java
100% (1/1)	100% (11/11)	100% (103/103)	100% (27/27)	ProjectTest.java
-------------------------------------------------------------------------------
COVERAGE SUMMARY FOR PACKAGE [swin.metrictool.intentions]:

[class, %]	[method, %]	[block, %]	[line, %]	[name]
100% (5/5)	97%  (35/36)	98%  (1060/1085)	98%  (204/209)	swin.metrictool.intentions

COVERAGE BREAKDOWN BY SOURCE FILE:

[class, %]	[method, %]	[block, %]	[line, %]	[name]
100% (1/1)	100% (4/4)	92%  (59/64)	94%  (16/17)	ClassMetricExtractorIntention.java
100% (1/1)	88%  (7/8)	94%  (309/329)	94%  (64/68)	ExtractVersionMetricsIntention.java
100% (1/1)	100% (4/4)	100% (465/465)	100% (58/58)	ExtractedVersionDataIntention.java
100% (1/1)	100% (9/9)	100% (101/101)	100% (30/30)	FileSystemUtilitiesIntention.java
100% (1/1)	100% (11/11)	100% (126/126)	100% (36/36)	XStreamUtilityIntention.java
-------------------------------------------------------------------------------




[PDM Report, not generated]
-------------------------------------------------------------------------------
swin\metrictool\ChartMaker.java:19              The class 'ChartMaker' has a Cyclomatic Complexity of 3 (Highest = 11).
swin\metrictool\ChartMaker.java:37              Avoid really long methods.
swin\metrictool\ChartMaker.java:37              The method 'create_FanChart' has a Cyclomatic Complexity of 11.
swin\metrictool\ChartMaker.java:101             Avoid really long methods.
swin\metrictool\ChartMaker.java:101             The method 'create_GrowthChart' has a Cyclomatic Complexity of 11.
swin\metrictool\ClassMetricExtractor.java:24    The class 'ClassMetricExtractor' has a Cyclomatic Complexity of 5 (Highest = 26).
swin\metrictool\ClassMetricExtractor.java:159   Avoid really long methods.
swin\metrictool\ClassMetricExtractor.java:159   The method 'extractMethodMetrics' has a Cyclomatic Complexity of 26.
swin\metrictool\ClassMetricExtractor.java:180   The method 'visitVarInsn' has a Cyclomatic Complexity of 7.
swin\metrictool\ClassMetricExtractor.java:201   The method 'visitFieldInsn' has a Cyclomatic Complexity of 5.
swin\metrictool\ClassMetricExtractor.java:271   The method 'extractDependencies' has a Cyclomatic Complexity of 5.
swin\metrictool\ExtractVersionMetrics.java:15   The class 'ExtractVersionMetrics' has a Cyclomatic Complexity of 3 (Highest = 6).
swin\metrictool\ExtractVersionMetrics.java:115  The method 'getMetrics' has a Cyclomatic Complexity of 5.
swin\metrictool\ExtractVersionMetrics.java:220  The method 'extractClassFilesFromJar' has a Cyclomatic Complexity of 6.
swin\metrictool\FileSystemUtilities.java:11     The class 'FileSystemUtilities' has a Cyclomatic Complexity of 4 (Highest = 6).
swin\metrictool\FileSystemUtilities.java:14     Avoid really long methods.
swin\metrictool\FileSystemUtilities.java:14     The method 'readFile' has a Cyclomatic Complexity of 6.
swin\metrictool\FileSystemUtilities.java:61     The method 'writeFile' has a Cyclomatic Complexity of 5.
swin\metrictool\HistIOTools.java:19             The class 'HistIOTools' has a Cyclomatic Complexity of 3 (Highest = 5).
swin\metrictool\HistIOTools.java:77             Avoid really long methods.
swin\metrictool\HistIOTools.java:133            Avoid really long methods.
swin\metrictool\HistIOTools.java:133            The method 'unpackHistogram' has a Cyclomatic Complexity of 5.
swin\metrictool\Histogram.java:184              Avoid really long methods.
swin\metrictool\OperationHandler.java:35        The class 'OperationHandler' has a Cyclomatic Complexity of 3 (Highest = 10).
swin\metrictool\OperationHandler.java:101       Avoid really long methods.
swin\metrictool\OperationHandler.java:101       The method 'run' has a Cyclomatic Complexity of 6.
swin\metrictool\OperationHandler.java:155       Avoid really long methods.
swin\metrictool\OperationHandler.java:209       Avoid really long methods.
swin\metrictool\OperationHandler.java:244       Avoid really long methods.
swin\metrictool\OperationHandler.java:333       Avoid really long methods.
swin\metrictool\OperationHandler.java:390       Avoid really long methods.
swin\metrictool\OperationHandler.java:390       The method 'actionPerformed' has a Cyclomatic Complexity of 10.
swin\metrictool\ProjectCreation.java:25         The class 'ProjectCreation' has a Cyclomatic Complexity of 5 (Highest = 16).
swin\metrictool\ProjectCreation.java:65         Avoid really long methods.
swin\metrictool\ProjectCreation.java:151        Avoid really long methods.
swin\metrictool\ProjectCreation.java:151        The method 'actionPerformed' has a Cyclomatic Complexity of 16.
-------------------------------------------------------------------------------


Metrics Report
-------------------------------------------------------------------------------
a) Total Packages:             2
b) Total Classes:              14    (#Model classes: 2 - #User interface classes: 2)
d) Number External Libraries:  10    (#Application libraries: 4 - #Build libraries: 6)
e) Total size:                 2867  (Raw line count of source code files)
-------------------------------------------------------------------------------


New and Noteworthy Features
-------------------------------------------------------------------------------
Collection class that creates the fan in and out plots and growth plots from VersionData class.
Plots are output to a jpg file for inclusion in HTML Reports.
Serialization of data extraction config.
User can pospone data extraction.
Serialization of extracted data to xml file.
Inclusion of EMMA Code Coverage Analysis
Library Information and Rationale Document
-------------------------------------------------------------------------------


Existing Features
-------------------------------------------------------------------------------
Creation of build process and project structure.
Release build packaging and automated testing.
Creation of project API java documentation.
-------------------------------------------------------------------------------


Known Issues
-------------------------------------------------------------------------------
Build is currently busted due to missing files.
Data extraction not 100% complete.
PMD is implemented but not functional.
EMMA analysis fails due to broken build.
-------------------------------------------------------------------------------


Features Planned for Next Release
-------------------------------------------------------------------------------
Refactor code analysis issues
PMD Analysis
Extraction of Class Files from JAR for Extraction of Metrics Data
Extraction of fan-in Metrics Data
Full Metrics Extraction for Class Files

-------------------------------------------------------------------------------


Installation Instructions
-------------------------------------------------------------------------------
From SVN Repository
1. Ensure JAVA_HOME environment variable is correctly set.
2. Ensure the JDK Bin folder is in the path environment variable.
3. Using an SVN client, checkout http://adp-fulltimers.googlecode.com/svn/trunk/
-------------------------------------------------------------------------------


Quick Start Instructions
-------------------------------------------------------------------------------
1. Follow 'Installation Instructions' above
2. From the base project directory, run: bin\run.bat
-------------------------------------------------------------------------------


Build Instructions
-------------------------------------------------------------------------------
To create release build:
1. Follow 'Installation Instructions' above
2. From project folder, run bin\daily.bat

To excute tests:
1. Follow 'Installation Instructions' above
2. Run bin\runtests.bat

To generate EMMA Code Coverage Metrics
1. Follow 'Installation Instructions' above
2. Ensure ANT_HOME is configured
3. Run: ant emma
-------------------------------------------------------------------------------
