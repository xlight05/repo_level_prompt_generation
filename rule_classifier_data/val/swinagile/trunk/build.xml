<?xml version="1.0" encoding="UTF-8"?>
<project name="metrictool" default="build" basedir=".">
	<description>ADP fulltimers build script</description>

	<!-- add _svn to support visual studio svn hack -->
	<defaultexcludes add="**/_svn"/>
	<defaultexcludes add="**/_svn/**"/>

	<!-- define build targets -->
	<target name="init">
		<property environment="env"/>
		<property file="${basedir}/config/build.properties"/>
		<path id="classpath">
			<fileset dir="${dir.lib}">
				<include name="asm-all-3.0_RC1.jar"/>
				<include name="jcommon-1.0.0.jar"/>
				<include name="jfreechart-1.0.1.jar"/>
				<include name="junit-4.1.jar"/>
				<include name="xpp3_min-1.1.3.4.O.jar"/>
				<include name="xstream-1.2.jar"/>
			</fileset>
			<!--pathelement path="${java.class.path}"/-->
		</path>
		<property name="classpath" refid="classpath"/>
		<!-- emma -->
		<path id="emma.lib" >
			<pathelement location="${dir.lib}/emma.jar" />
			<pathelement location="${dir.lib}/emma_ant.jar" />
		</path>
		<taskdef resource="emma_ant.properties" classpathref="emma.lib"/>
		<!-- pmd -->
		<path id="pmd.lib">
			<fileset dir="${dir.lib}\pmd-3.8\lib">
				<include name="jakarta-oro-2.0.8.jar" />
				<include name="jaxen-1.1-beta-10.jar" />
				<include name="pmd-3.8.jar" />
				<include name="xercesImpl-2.6.2.jar" />
				<include name="xmlParserAPIs-2.6.2.jar" />
			</fileset>
		</path>
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.lib"/>
		<!-- timestamps build and seeds version numbers -->
		<tstamp/>
		<property file="${dir.config}/build.version"/>
		<property name="build.number" value="${build.major}.${build.minor}"/>
		<property name="build.label" value="Build${build.minor}"/>
		<property name="project.name" value="${ant.project.name}-${build.number}"/>
	</target>

	<target name="debug" depends="init">
		<echoproperties/>
    </target>

	<target name="prepare" depends="init">
		<mkdir dir="${dir.classes}"/>
		<mkdir dir="${dir.instr}"/>
		<mkdir dir="${dir.target}"/>
		<mkdir dir="${dir.javadoc}"/>
		<mkdir dir="${dir.coverage}"/>
		<mkdir dir="${dir.reports}"/>
		<mkdir dir="${dir.pmd}"/>
	</target>

	<target name="clean" depends="init" description="clobbers files generated by the build process">
		<delete dir="${dir.classes}"/>
		<delete dir="${dir.instr}"/>
		<delete includeemptydirs="true">
			<fileset dir="${dir.reports}" includes="**/*"/>
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${dir.javadoc}" includes="**/*"/>
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${dir.coverage}" includes="**/*"/>
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${dir.pmd}" includes="**/*"/>
		</delete>
		<delete file="${dir.target}/${project.name}.jar"/>
		<delete file="${dir.target}/${project.name}.zip"/>
		<delete>
			<fileset dir="${basedir}" includes="test*.jpg"/>
		</delete>
	</target>

	<target name="fetch" depends="init">
	</target>

	<target name="checkin" depends="" unless="test.failed">
		<echo message="WARNING: Please manually commit changes to build files..."/>
	</target>

	<target name="eclipse" depends="init" if="eclipse.running">
		<echo>Eclipse IDE - using JDTCompilerAdapter</echo>
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	</target>

	<target name="compile" depends="eclipse,prepare" description="compiles all java source code">
		<javac debug="${javac.debug}" destdir="${dir.classes}" classpath="${classpath}">
			<src path="${dir.src}"/>
			<src path="${dir.test}"/>
			<!--include name="swin/metrictool/**"/-->
			<exclude name="${dir.src}/data/**"/>
		</javac>
	</target>

	<target name="test" depends="compile" description="runs all xunit tests on java classes">
		<junit printsummary="withOutAndErr" failureproperty="test.failed" haltonfailure="no">
			<classpath>
				<pathelement path="${dir.classes}"/>
				<pathelement path="${classpath}"/>
			</classpath>
			<formatter type="plain"/>
			<formatter type="xml"/>
			<batchtest fork="yes" todir="${dir.reports}">
				<fileset dir="${dir.test}">
					<include name="**/*.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="report" depends="test">
		<junitreport todir="${dir.reports}">
			<fileset dir="${dir.reports}">
				<include name="**/TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${dir.reports}"/>
		</junitreport>
	</target>

	<target name="jar" depends="compile" unless="test.failed">
		<jar jarfile="${dir.target}\${project.name}.jar" basedir="${dir.classes}" includes="**/*.class"/>
	</target>

	<target name="docs" depends="prepare" unless="test.failed">
		<!-- compiles all javadoc into the doc/api directory -->
		<javadoc destdir="${dir.javadoc}" author="true" version="true" use="true" windowtitle="MetricTool API">
			<classpath>
				<pathelement path="${classpath}"/>
				<pathelement path="${dir.classes}"/>
			</classpath>
			<fileset dir="${dir.src}">
				<include name="**\*.java"/>
			</fileset>
			<doctitle><![CDATA[<h1>MetricTool Documentation</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2006 ADP Fulltimers. All Rights Reserved.</i>]]></bottom>
			<link href="http://java.sun.com/j2se/${javadoc.j2se.version}/docs/api"/>
		</javadoc>
	</target>

	<target name="deploy" depends="jar,report,docs,emma,pmd" unless="test.failed">
		<!-- zips up the current release, which contains the jar, api documentation, etc, and the release notes -->
		<zip destfile="${dir.target}/${project.name}.zip">
			<zipfileset dir="${dir.doc}" excludes="**/TEST-*.xml, **/TESTS-*.xml" prefix="${project.name}/doc"/>
			<zipfileset dir="${dir.target}" includes="${project.name}.jar" fullpath="${project.name}\${project.name}.jar"/>
		</zip>
	</target>

	<target name="pmd" depends="init">
		<!-- analyses code base for design and duplication errors -->
		<pmd shortFilenames="true" targetjdk="${ant.java.version}" rulesetfiles="${dir.config}/pmd-rules.xml">
			<formatter type="summaryhtml" toFile="${dir.pmd}/pmd_report.html"/>
			<formatter type="text" toFile="${dir.pmd}/pmd_report.txt"/>
			<fileset dir="${dir.src}">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
	</target>

	<target name="emma" depends="compile">
		<property name="emma.enabled" value="true"/>
	    <property name="emma.filter" value="*"/>
		<emma enabled="${emma.enabled}">
			<instr instrpath="${dir.classes}" destdir="${dir.instr}" metadatafile="${dir.coverage}/coverage.emma" mode="copy" merge="true">
				<filter value="${emma.filter}"/>
			</instr>
		</emma>
		<junit fork="true" haltonfailure="no">
			<jvmarg value="-Demma.coverage.out.file=${dir.coverage}/coverage.emma"/>
			<jvmarg value="-Demma.coverage.out.merge=true"/>
			<classpath>
				<pathelement path="${dir.instr}"/>
				<pathelement path="${dir.classes}"/> <!-- required for non-instrumented interfaces -->
				<pathelement path="${classpath}"/>
				<path refid="emma.lib" />
			</classpath>
			<formatter type="plain"/>
			<batchtest fork="yes" todir="${dir.reports}">
				<fileset dir="${dir.test}">
					<include name="**/*.java"/>
				</fileset>
			</batchtest>
		</junit>
		<emma enabled="${emma.enabled}">
			<report sourcepath="${dir.src}" sort="+block,+name,+method,+class" metrics="method:70,block:80,line:80,class:100">
				<fileset dir="${dir.coverage}">
					<include name="*.emma"/>
				</fileset>
				<txt outfile="${dir.coverage}/coverage.txt" depth="package" columns="class,method,block,line,name"/>
				<xml outfile="${dir.coverage}/coverage.xml" depth="package"/>
				<html outfile="${dir.coverage}/coverage.html" depth="method" columns="name,class,method,block,line"/>
			</report>
		</emma>
	</target>

	<target name="run" depends="jar" description="runs the application">
		<java fork="true" classname="swin.metrictool.ProjectCreation">
			<classpath>
				<pathelement path="${dir.target}\${project.name}.jar"/>
				<pathelement path="${classpath}"/>
			</classpath>
		</java>
	</target>

	<target name="start" depends="init">
		<!-- performs start-up build tasks and echoes build info -->
		<available file="${dir.config}/build.version" type="file" property="build.version.present"/>
		<fail unless="build.version.present" message="Missing build version file: ${dir.config}/build.version."/>
		<tstamp>
			<format property="build.start" pattern="yyyy/MM/dd HH.mm.ss"/>
		</tstamp>
		<echo message="Build started: ${build.start}${line.separator}"/>
		<echo message="Build version: ${build.number}${line.separator}"/>
	</target>

	<target name="stop">
		<!-- performs build completion tasks and echoes timestamp -->
		<tstamp>
			<format property="build.stop" pattern="yyyy/MM/dd HH.mm.ss"/>
		</tstamp>
		<echo message="Build completed: ${build.stop}${line.separator}"/>
	</target>

	<target name="increment" depends="test" unless="test.failed">
		<!-- increments the previous minor build version - only used for release builds -->
		<propertyfile file="${dir.config}/build.version">
			<entry key="build.major" type="int" default="1"/>
				<entry key="build.minor" type="int" default="-1" operation="+" pattern="0"/>
			<entry key="build.date" type="date" value="now" pattern="yyyy/MM/dd HH.mm.ss"/>
		</propertyfile>
	</target>

	<target name="build" depends="">
		<antcall target="start"/>
		<antcall target="jar"/>
		<antcall target="stop"/>
	</target>

	<target name="all" depends="" description="cleans and re-deploys project">
		<antcall target="start"/>
		<antcall target="clean"/>
		<antcall target="fetch"/>
		<antcall target="deploy"/>
		<antcall target="checkin"/>
		<antcall target="stop"/>
		<!-- increment -->
	</target>

</project>