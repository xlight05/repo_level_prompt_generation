<?xml version="1.0" ?>
<!DOCTYPE Repository [
    <!--
        the Repository element configures a repository instance;
        individual workspaces of the repository are configured through
        separate configuration files called workspace.xml which are
        located in a subfolder of the workspaces root directory
        (see Workspaces element).

        it consists of

            a FileSystem element (the virtual file system
            used by the repository to persist global state such as
            registered namespaces, custom node types, etc..

            a Security element that specifies the name of the app-entry
            in the JAAS config and the access manager

            a Workspaces element that specifies the location of the 
            workspaces root directory, the name of the default workspace,
            the maximum idle time before a workspace is automatically
            shutdown (optional) and the workspace configuration root directory
            within the virtual repository file system (optional)

            a Workspace element that is used as a workspace configuration
            template; it is used to create the initial workspace if there's
            no workspace yet and for creating additional workspaces through
            the api

            a Versioning element that is used for configuring
            versioning-related settings

            a SearchIndex element that is used for configuring Indexing-related
            settings on the /jcr:system tree.
    -->
    <!ELEMENT Repository (FileSystem,Security,Workspaces,Workspace,Versioning,SearchIndex?)>

    <!--
        a virtual file system
    -->
    <!ELEMENT FileSystem (param*)>
    <!ATTLIST FileSystem
      class CDATA #REQUIRED>

    <!--
        the Security element specifies the name (appName attribute)
        of the JAAS configuration app-entry for this repository.

        it also specifies the access manager to be used (AccessManager element).
    -->
    <!ELEMENT Security (AccessManager, LoginModule?)>
    <!ATTLIST Security
      appName CDATA #REQUIRED>

    <!--
        the AccessManager element configures the access manager to be used by
        this repository instance; the class attribute specifies the FQN of the
        class implementing the AccessManager interface
    -->
    <!ELEMENT AccessManager (param*)>
    <!ATTLIST AccessManager
      class CDATA #REQUIRED>

    <!--
        generic parameter (name/value pair)
    -->
    <!ELEMENT param EMPTY>
    <!ATTLIST param
      name CDATA #REQUIRED
      value CDATA #REQUIRED>

    <!--
        the LoginModule element optionally specifies a JAAS login module to
        authenticate users. This feature allows the use of Jackrabbit in a
        non-JAAS environment.
    -->
    <!ELEMENT LoginModule (param*)>
    <!ATTLIST LoginModule
      class CDATA #REQUIRED>

    <!--
        the Workspaces element specifies the physical workspaces root directory
        (rootPath attribute), the name of the default workspace
        (defaultWorkspace attribute), the (optional) maximum amount of time in
        seconds before an idle workspace is automatically shutdown
        (maxIdleTime attribute) and the (optional) workspace configuration
        root directory within the virtual repository file system (configRootPath
        attribute).

        individual workspaces are configured through individual workspace.xml
        files located in a subfolder each of either

        a) the physical workspaces root directory

        or, if configRootPath had been specified,

        b) the configuration root directory within the virtual repository file system.
    -->
    <!ELEMENT Workspaces EMPTY>
    <!ATTLIST Workspaces
        rootPath CDATA #REQUIRED
        defaultWorkspace CDATA #REQUIRED
        configRootPath CDATA #IMPLIED
        maxIdleTime CDATA #IMPLIED>

    <!--
        the Workspace element serves as a workspace configuration template;
        it is used to create the initial workspace if there's no workspace yet
        and for creating additional workspaces through the api
    -->
    <!ELEMENT Workspace (FileSystem,PersistenceManager,SearchIndex?)>
    <!ATTLIST Workspace
      name CDATA #REQUIRED>

    <!--
        the PersistenceManager element configures the persistence manager
        to be used for the workspace; the class attribute specifies the
        FQN of the class implementing the PersistenceManager interface
    -->
    <!ELEMENT PersistenceManager (param*)>
    <!ATTLIST PersistenceManager
      class CDATA #REQUIRED>

    <!--
        the SearchIndex element specifies the locaction of the search index
        (used by the QueryHandler); the class attribute specifies the
        FQN of the class implementing the QueryHandler interface.
    -->
    <!ELEMENT SearchIndex (param*,FileSystem?)>
    <!ATTLIST SearchIndex
      class CDATA #REQUIRED>

    <!--
        the Versioning element configures the persistence manager
        to be used for persisting version state
    -->
    <!ELEMENT Versioning (FileSystem, PersistenceManager)>
    <!ATTLIST Versioning
      rootPath CDATA #REQUIRED
    >
]>
<Repository>
 <!-- 
	Abstraction of a Virtual File System, used to expose the repository as a FileSystem, or whatever. This case a local FileSystem:
	 -->
    <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
        <param name="path" value="${rep.home}/repository"/>
    </FileSystem>
    <!-- 
	Other options:
		org.apache.jackrabbit.core.fs.db.DbFileSystem 		- for a VFS based on a database.
		org.apache.jackrabbit.core.fs.local.LocalFileSystem	- for a VFS based on a local file system
		org.apache.jackrabbit.core.fs.BasedFileSystem		- ...?!
    -->

    <Security appName="Jackrabbit">
        <AccessManager class="org.apache.jackrabbit.core.security.SimpleAccessManager"/>
    </Security>
    
       <!-- Where the workspaces are stored -->
    <Workspaces rootPath="${rep.home}/workspaces" defaultWorkspace="default" />

    <!-- A template for a workspace -->
    <Workspace name="${wsp.name}">

   	<!-- 
	Abstraction of a Virtual File System, used to expose the repositories as a FileSystem, or whatever. This case a local FileSystem:
	 -->
        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${wsp.home}"/>
        </FileSystem>

	<!-- Persistence Managers handle the persistent storage of content nodes and properties. 
	      More information: http://jackrabbit.apache.org/api-1/org/apache/jackrabbit/core/state/PersistenceManager.html -->
        <PersistenceManager class="org.apache.jackrabbit.core.state.xml.XMLPersistenceManager" />
	<!--
  		Other options:
			org.apache.jackrabbit.core.state.mem.InMemPersistenceManagapplications in the near future More?er  	- for persistence in memory.
			org.apache.jackrabbit.core.state.obj.ObjectPersistenceManager 		- for persistence using Serialization.
			org.apache.jackrabbit.core.state.xml.XMLPersistenceManager 		- for persistence using XML
 			org.apache.jackrabbit.core.state.db.SimpleDbPersistenceManager	- for persistence using JDBC (who needs normalization anyway...)
			org.apache.jackrabbit.core.state.db.DerbyPersistenceManager 		- for persistence using Derby, the embeddable Java DB.
			
		for more details check: http://jackrabbit.apache.org/doc/config.html 
	-->
    </Workspace>
    
    <!-- Versioning magic -->
    <Versioning rootPath="${rep.home}/versions">
        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${rep.home}/versions"/>
        </FileSystem>
        <PersistenceManager class="org.apache.jackrabbit.core.state.xml.XMLPersistenceManager" />
    </Versioning>
</Repository>